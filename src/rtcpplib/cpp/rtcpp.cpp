/*
 * This C++ source file was generated by the Gradle 'init' task.
 */

#include "rtpdump.h"
#include "rtppacket.h"
#include "rtpanalyzer.h"
#include "jsonmsg.h"
#include "rtcpp.h"
#include <optional>
#include "rtpdecrypt.h"

using namespace rtcpp;

namespace rtcpp {

    struct TransformContext {
        std::optional<RTPDecrypt> decryptor;
        std::vector<uint8_t> buffer;
    };

    std::string AnalyzeRTPDump(DataSource& dataStream) {
        RTPDumpReader packetReader(dataStream);
        RTPStreamAnalyzer analyzer;

        int counter = 0;
        while (packetReader.HasMore()) {
            counter++;
            RTPDumpPacket packet;
            packetReader.ReadPacket(packet);
            RTPPacketView rtpPktView(packet.payload);
            analyzer.AnalyzePacket(rtpPktView);
        }

        return BuildJSONAnalyzeReport(analyzer);
    }

    void TransformPacket(RTPDumpPacket& original, RTPDumpPacket& transformed, StreamTransformCfg& cfg, TransformContext& ctx) {
        void* dstBuf = transformed.payload.pData;
        void* srcBuf = original.payload.pData;

        size_t len = original.payload.length;
        transformed.payload.length = len;

        memcpy(dstBuf, srcBuf, len);

        if (ctx.decryptor) {
            int newLen = ctx.decryptor->Decrypt(cfg.GetSSRC(), dstBuf, len);
            transformed.payload.length = newLen;
            int lenDiff = (int)len - newLen;

            RTPDumpPacketHeaderView hdrView(transformed.hdr);

            // update packet lenght, because auth tag is removed by decryptor
            if (hdrView.GetLength() >= lenDiff) {
                hdrView.SetLength(hdrView.GetLength() - lenDiff);
            } else {
                throw std::runtime_error("Bad packet length in packet header");
            }

            if (hdrView.GetPayloadLen() > 0) {
                if (hdrView.GetPayloadLen() >= lenDiff) {
                    hdrView.SetPayloadLen(hdrView.GetPayloadLen() - lenDiff);
                } else {
                    throw std::runtime_error("Bad payload len in packet header");
                }
            }

        }

        RTPPacketView pktView(transformed.payload);

        if (cfg.IsPT()) {
            pktView.SetPT(cfg.GetPT());
        }
    }

    TransformContext InitContext(TransformCfg& cfg) {
        TransformContext ctx;
        ctx.decryptor.emplace(cfg);

        const size_t MTU_SIZE = 1500;
        ctx.buffer.resize(MTU_SIZE);

        return ctx;
    }

    void TransformRTPDump(DataSource& istream, DataSink& ostream, const std::string& jsonCfg) {
        TransformCfg cfg;
        ParseJSONTransformCfg(jsonCfg, cfg);

        RTPDumpReader packetReader(istream);
        RTPDumpWriter packetWriter(ostream);

        packetWriter.WriteHeader(packetReader.GetDumpHeaderMagic(), packetReader.GetDumpHeader());

        TransformContext ctx = InitContext(cfg);

        size_t packets = 0;
        while (packetReader.HasMore()) {
            packets++;

            RTPDumpPacket packet;
            packetReader.ReadPacket(packet);
            RTPPacketView rtpPktView(packet.payload);

            uint32_t ssrc = rtpPktView.GetSSRC();
            auto streamCfgIt = cfg.find(ssrc);
            if (streamCfgIt != cfg.end()) {
                ctx.buffer.resize(packet.payload.length);

                RTPDumpPacket transformedPacket = {
                        packet.hdr,
                        { ctx.buffer.data(), ctx.buffer.size() } };

                TransformPacket(packet, transformedPacket, streamCfgIt->second, ctx);
                packetWriter.WritePacket(transformedPacket);

            } else {
                // just copy full packet without changes
                packetWriter.WritePacket(packet);
            }
        }
    }

}