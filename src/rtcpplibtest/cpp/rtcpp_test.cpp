/*
 * This C++ source file was generated by the Gradle 'init' task.
 */

#include "rtcpp.h"
#include "jsonmsg.h"
#include "srtp2/srtp.h"

uint8_t singlePacket[] = {
        0x23, 0x21, 0x72, 0x74, 0x70, 0x70, 0x6C, 0x61, 0x79, 0x31, 0x2E, 0x30, 0x20, 0x38, 0x32, 0x2E,
        0x33, 0x2E, 0x35, 0x39, 0x2E, 0x39, 0x35, 0x2F, 0x35, 0x30, 0x30, 0x34, 0x0A, 0x5F, 0xDC, 0xB3,
        0x06, 0x00, 0x00, 0x03, 0x9F, 0xAC, 0x1D, 0x20, 0x25, 0x89, 0xCC, 0x00, 0x00, 0x00, 0x45, 0x00,
        0x3D, 0x00, 0x00, 0x00, 0x00, 0x81, 0xE4, 0x00, 0x64, 0x00, 0x05, 0x5C, 0xBC, 0x1A, 0xB5, 0x39,
        0xB1, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x8B, 0x87, 0xE1, 0x25, 0x03, 0x12, 0x45, 0xF0, 0x78, 0x52,
        0x4A, 0x2D, 0x29, 0xF7, 0x3C, 0xCF, 0x8C, 0x8B, 0xAB, 0x1B, 0x3C, 0x42, 0x6A, 0xB3, 0xAD, 0x9B,
        0x24, 0x86, 0xEC, 0x97, 0x93, 0x8C, 0x19, 0xCC, 0x54, 0x0B, 0x10, 0x91, 0xB8, 0x2F, 0xB5, 0xF8,
        0x4C, 0xD2
};

void fileTest() {
    const std::string fileName = "data/encrypted.rtpdump";
    rtcpp::FileDataSource fs(fileName);

    rtcpp::AnalyzeRTPDump(fs);
}

void memoryTest() {
    rtcpp::MemoryDataSource ms(singlePacket, sizeof(singlePacket));
    rtcpp::AnalyzeRTPDump(ms);
}

void jsonParseTest() {
    std::string json = " {\n"
                       "    \"448084401\": {\n"
                       "        \"pt\":\"43\",\n"
                       "        \"encryptionType\":\"AES128_SHA1_80\",\n"
                       "        \"encryptionMode\":\"Unencrypted_SRTCP\",\n"
                       "        \"encryptionKey\":\"dfafdsa\"\n"
                       "    }\n"
                       "}\n";

    rtcpp::TransformCfg cfg;
    rtcpp::ParseJSONTransformCfg(json, cfg);
}

void jsonEmptyTransform() {
    std::string json = " {\n"
                       "}\n";

    rtcpp::MemoryDataSource sin(singlePacket, sizeof(singlePacket));

    std::vector<uint8_t> dstBuffer(sizeof(singlePacket));
    rtcpp::MemoryDataSink sout(dstBuffer.data(), dstBuffer.size());

    rtcpp::TransformRTPDump(sin, sout, json);

    size_t diffBytes = 0;
    for (size_t i = 0; i < sizeof(singlePacket); ++i) {
        if (singlePacket[i] != dstBuffer[i]) {
            ++diffBytes;
        }
    }
}

void jsonPTTransform() {
    std::string json = " {\n"
                       "    \"448084401\": {\n"
                       "        \"pt\":\"43\"\n"
                       "    }\n"
                       "}\n";

    rtcpp::MemoryDataSource sin(singlePacket, sizeof(singlePacket));

    std::vector<uint8_t> dstBuffer(sizeof(singlePacket));
    rtcpp::MemoryDataSink sout(dstBuffer.data(), dstBuffer.size());

    rtcpp::TransformRTPDump(sin, sout, json);

    size_t diffBytes = 0;
    for (size_t i = 0; i < sizeof(singlePacket); ++i) {
        if (singlePacket[i] != dstBuffer[i]) {
            ++diffBytes;
        }
    }
}

void decryptPacket() {
    const uint8_t encrypted[182] = {0x80, 0x88, 0x00, 0x00, 0x00, 0x00, 0x6c, 0xf8, 0xd8, 0x23, 0xca, 0xcd, 0xfa, 0xdc, 0x22, 0x42,
                              0xd4, 0xe0, 0x18, 0x14, 0xda, 0x58, 0xf0, 0xd3, 0x05, 0xc8, 0xc0, 0x44, 0x29, 0x36, 0x92, 0xad,
                              0xbb, 0x1c, 0x1b, 0x67, 0x09, 0xa5, 0x75, 0x9b, 0xd7, 0xfb, 0xa9, 0x64, 0x40, 0x8a, 0x73, 0x93,
                              0xd8, 0xb3, 0x41, 0x77, 0x5d, 0xf1, 0x0e, 0xcc, 0x61, 0x6c, 0xd6, 0x9e, 0x1a, 0x7a, 0x76, 0x74,
                              0x68, 0x1a, 0xab, 0x13, 0x07, 0x16, 0x24, 0x98, 0x74, 0x48, 0xeb, 0x8c, 0x97, 0x41, 0x6f, 0x68,
                              0xff, 0x91, 0x84, 0x84, 0xaa, 0x44, 0x47, 0xb3, 0x73, 0x15, 0x02, 0x8e, 0x6c, 0x1a, 0xc5, 0xe1,
                              0xf5, 0x16, 0x2c, 0x0a, 0xb8, 0x04, 0x34, 0xea, 0x8b, 0x68, 0x00, 0xf1, 0x72, 0x56, 0xef, 0x75,
                              0x84, 0xd2, 0xba, 0x41, 0x82, 0xda, 0x43, 0x7a, 0xca, 0xb4, 0xd8, 0x89, 0xa6, 0x8e, 0xb2, 0x7b,
                              0x71, 0xe3, 0x16, 0x4a, 0xea, 0x34, 0xb6, 0x71, 0x55, 0x62, 0x78, 0xd8, 0xf4, 0x48, 0xeb, 0x0d,
                              0x31, 0x99, 0x2d, 0x0c, 0x24, 0x0f, 0xc5, 0xfc, 0x83, 0xe4, 0xca, 0x37, 0xe6, 0x69, 0x36, 0x8c,
                              0xbf, 0x6e, 0xf2, 0x6d, 0xc5, 0x27, 0xd9, 0x3d, 0x66, 0x11, 0x04, 0x09, 0x42, 0x9c, 0x9b, 0xc4,
                              0xf3, 0x23, 0x35, 0x4e, 0x36, 0xf3 };

    const uint8_t decrypted[172] = { 0x80, 0x88, 0x00, 0x00, 0x00, 0x00, 0x6c, 0xf8, 0xd8, 0x23, 0xca, 0xcd, 0xd5, 0xd5, 0xd5, 0xd5,
                            0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5, 0xd5,
                            0xd5, 0xd5, 0xd5, 0xd5, 0x55, 0xd5, 0xd5, 0xd5, 0x55, 0x55, 0xd5, 0xd5, 0xd5, 0x55, 0xd5, 0xd5,
                            0xd5, 0x55, 0x55, 0xd5, 0x55, 0x55, 0xd5, 0x55, 0xd5, 0xd5, 0xd5, 0x55, 0x55, 0xd5, 0xd5, 0x55,
                            0x55, 0xd5, 0xd5, 0xd5, 0x55, 0x55, 0xd5, 0xd4, 0x55, 0x57, 0xd5, 0xd5, 0xd5, 0x55, 0x54, 0xd5,
                            0xd7, 0x57, 0x55, 0xd7, 0x54, 0x54, 0x57, 0xd1, 0xd4, 0x50, 0xd7, 0x55, 0xd7, 0xd1, 0x5d, 0x57,
                            0xdc, 0x55, 0x56, 0x56, 0xd4, 0xd0, 0x55, 0x57, 0x57, 0xd1, 0xd7, 0x51, 0x55, 0xd6, 0x55, 0x57,
                            0x57, 0xd1, 0x54, 0x57, 0xd5, 0x54, 0xd6, 0x55, 0x53, 0x55, 0xd2, 0x55, 0x57, 0x51, 0xd0, 0xd0,
                            0x51, 0x57, 0x55, 0xd7, 0xd1, 0x51, 0x52, 0xd2, 0xd5, 0x54, 0x57, 0x56, 0xd2, 0x54, 0x57, 0x57,
                            0x57, 0xd2, 0x54, 0x56, 0xd4, 0xd5, 0xd5, 0x55, 0x55, 0xd5, 0xd5, 0xd5, 0x55, 0x55, 0xd5, 0x55,
                            0x55, 0xd5, 0xd5, 0x55, 0x55, 0xd5, 0xd5, 0x55, 0x55, 0x55, 0xd5, 0xd5 };

    uint8_t key[30] = { 0xE1, 0xF9, 0x7A, 0x0D, 0x3E, 0x01, 0x8B, 0xE0, 0xD6, 0x4F, 0xA3, 0x2C, 0x06, 0xDE, 0x41, 0x39,
                        0x0E, 0xC6, 0x75, 0xAD, 0x49, 0x8A, 0xFE, 0xEB, 0xB6, 0x96, 0x0B, 0x3A, 0xAB, 0xE6 };

    if (srtp_init() != srtp_err_status_ok) {
        printf("failed to initialize srtp lib");
    }

    srtp_t session = {};
    srtp_policy_t policy = {};

    srtp_crypto_policy_set_rtp_default(&policy.rtp);
    srtp_crypto_policy_set_rtcp_default(&policy.rtcp);


    policy.ssrc.type = ssrc_any_inbound;
    policy.key  = key;
    policy.next = nullptr;

    // allocate and initialize the SRTP session
    srtp_create(&session, &policy);

    int len = sizeof(encrypted);
    std::vector<uint8_t> buf;
    buf.resize(sizeof(encrypted));
    memcpy(buf.data(), encrypted, sizeof(encrypted));

    if (srtp_unprotect(session, buf.data(), &len) != srtp_err_status_ok) {
        printf("failed to decrypt packet");
    }

    if (srtp_shutdown() != srtp_err_status_ok) {
        printf("failed to shutdown srtp lib");
    }

    if (len == sizeof(decrypted)) {
        if (memcmp(decrypted, buf.data(), len) != 0) {
            printf("decrypted packet mismatch");
        }
    } else {
        printf("length mismatch!");
    }
}

void decryptDump() {
    std::string json = " {\n"
                       "    \"3693984218\": {\n"
                       "        \"encryptionType\":\"AES128_SHA1_80\",\n"
                       "        \"encryptionMode\":\"Default\",\n"
                       "        \"encryptionKey\":\"4fl6DT4Bi+DWT6MsBt5BOQ7Gda1Jiv7rtpYLOqvm\"\n"
                       "    }\n"
                       "}\n";

    std::string fileNameIn = "data/encrypted.rtpdump";
    rtcpp::FileDataSource fin(fileNameIn);

    std::string fileNameOut = "data/decrypted.rtpdump";
    rtcpp::FileDataSink fout(fileNameOut);

    rtcpp::TransformRTPDump(fin, fout, json);

}

int main() {
    fileTest();
    //memoryTest();
    //jsonParseTest();
    //jsonEmptyTransform();
    //jsonPTTransform();
    //decryptPacket();

    //decryptDump();

    return 0;
}

